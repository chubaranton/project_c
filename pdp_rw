#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

typedef unsigned char byte;         //8 bit
typedef unsigned short int word;    //16 bit
typedef word Adress;				//16bit

#define MEMSIZE (64 * 1024)

byte mem[MEMSIZE];

byte b_read  (Adress adr);
void b_write (Adress adr, byte b);
word w_read  (Adress adr);
void w_write (Adress adr, word w);

void test_mem() {
    Adress a = 6;
    word w = 0x0cab;
    w_write(a, w);
    word wress = w_read(a);
    printf("%04hx = %04hx\n", w, wress);
    assert(w == wress);
}

int main() {
	test_mem();
	return 0;
}

byte b_read  (Adress adr) {
	return mem[adr];
}

void b_write (Adress adr, byte b) {
	mem[adr] = b;
}

word w_read  (Adress adr) {
	word w = ((word)mem[adr + 1]) << 8;
	w = w | mem[adr];
	return w;
}

void w_write (Adress adr, word w) {
	word w1 = w >> 8;
	byte b1 = ((byte)w);
	mem[adr] = b1;
	byte b2 = ((byte)w1);
	mem[adr + 1] = b2;
}
