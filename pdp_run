#pragma once

typedef unsigned char byte;              // 8 bit
typedef unsigned short int word;         // 16 bit
typedef word Adress;                     // 16 bit

#define MEMSIZE (64*1024)

byte mem[MEMSIZE];


word reg[8];       //ругистры R0 .. R7
#define pc reg[7]
#define sp reg[6]

void do_halt();
void do_mov();
void do_add();
void do_nothing();
void do_sub();
void do_clear();
void do_clear();
void do_movb();
void do_br();
void do_beq();
void do_bpl();
void do_tst();
void do_tstb();
void do_jsr();
void do_rts();

typedef struct {
    word mask;
    word opcode;
    char * name;
    void (*do_func)(void);
    char params;
} Command;


void run();
void trace(const char* format, ...);

#define NO_PARAMS 0
#define HAS_DD 1
#define HAS_SS 2
#define HAS_NN 4
#define HAS_R 8
#define HAS_XX 16
#define HAS_RL 32  // when register last 3 bytes

void print_reg();

void set_NZ();
void set_C();

#define ostat 0177564  // display status register
#define odata 0177566  // display data register



void do halt() {
    trace("THE END!!!\n");
    exit(0);
}
void do_mov() {
    w_write(dd.adr, ss.val);
}
void do_add() {}
void do_nothing() {}
typedef struct  {
word mask;
word opcode;
char * name;
void (*do_func)(void);
} Command;
Command cmd[] = {
        {0170000, 0010000, "mov", do_mov},
        {0170000, 0060000, "add", do_add},
}
typedef struct {
    word val;
    word adr;

} Arg;
Arg ss, dd;

Arg get_mr(word w) {
    Arg res;
    int r = w & 7;
    int mode = (w >> 3) & 7;
    switch (m) {
        case 0:       // R3
            res.adr = r;
            res.val = reg[r];
            trace("R%o ", r);
            break;
        case 1:    // (R3)
            res.adr = reg[r];
            if (is_byte && r != 6 && r !=7)
                res.val = b_read(res.adr);
            else
                res.val = w_read(res.adr);   // to do b_read
            trace("(R%o) ", r);
            break;
        case 2:    // (R3)+
            res.adr = reg[r];
            if (is_byte && r != 6 && r !=7) {
                res.val = b_read(res.adr);   // to do b_read
                reg[r] += 1;                 // to do +1
            }
            else {
                res.val = w_read(res.adr);   // to do w_read
                reg[r] += 2;      // to do +1
            }
            if (r == 7)
                trace("#%06o ", res.val);
            else
                trace("(R%o)+ ", r);
            break;
        case 3:   //  @(R3)+
            res.adr = reg[r];
            res.adr = w_read(res.adr);
            res.val = w_read(res.adr);
            reg[r] += 2;
            break;
        case 4:   //  -(R3)
            if (is_byte && r != 6 && r !=7) {
                reg[r] -= 1;
                res.adr = reg[r];
                res.val = b_read(res.adr);
            }
            else {
                reg[r] -= 2;
                res.adr = reg[r];
                res.val = w_read(res.adr);
            }
            if (r == 7)
                trace("#%06o ", res.val);
            else
                trace("-(R%o) ", r);
            break;
        case 6:   // x(R3)
            x = w_read(pc);
            pc += 2;
            res.adr = x + reg[r];
            res.val = w_read(res.adr);
            if (r == 7)
                trace("%06o ", res.adr);
            else
                trace("%o(R%o) ", x, r);
            break;
        default:
            fprintf(stderr,
                    "Mode %o NOT IMPLEMENTED YET!\n", mode);
            exit(1);
    }
    return res;
}
void run() {
    pc = 01000;
    while(1) {
        word w = w_read(pc);
        trace("%06o %06o: ", pc, w);
        pc += 2;
        for (int i = 0; 1; ++i) {
            if ( (w & cmd[i].mask) == cmd[i].opcode) {
                trace(cmd[i].name);
                trace(" ");
                is_byte = w & 0100000;
                if (cmd[i].params & HAS_SS) {
                    ss = get_mr(w >> 6);
                }
                if (cmd[i].params & HAS_DD) {
                    dd = get_mr(w);
                }
                if (cmd[i].params & HAS_NN) {
                    nn = get_nn(w);
                }
                if (cmd[i].params & HAS_R) {
                    r = get_r(w);
                }
                if (cmd[i].params & HAS_XX) {
                    xx = get_xx(w);
                }
                if (cmd[i].params & HAS_RL) {
                    r = get_r_last(w);
                }
                cmd[i].do_func();
                break;
            }
        }
        trace("\n");
    }
}
