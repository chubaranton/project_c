#include <stdio.h>
#include <assert.h>

typedef unsigned char byte;              // 8 bit
typedef unsigned short int word;         // 16 bit
typedef word Adress;                     // 16 bit

#define MEMSIZE (64*1024)

byte mem[MEMSIZE];

void b_write(Adress adr, byte b);
byte b_read(Adress adr);
void w_write(Adress adr, word w);
word w_read(Adress adr);
void load_file(const char* filename);
void mem_dump(Adress adr, word w);

void test_mem() {
    byte b0 = 0x0a;
    // пишем байт, читаем байт
    b_write(2, b0);
    byte bres = b_read(2);
    printf("%02hhx = %02hhx\n", b0, bres);
    assert(b0 == bres);

    //пишем 2 байта читаем слово
    Adress a = 4;
    byte b1 = 0x0b;
    b0 = 0x0a;
    word w = 0x0b0a;
    b_write(a, b0);
    b_write(a + 1, b1);
    word wres = w_read(a);
    printf("ww/br \t %04hx = %02hhx%02hhx\n", wres, b1, b0);
    assert(w == wres);
}
void test_load(const char* filename) {
    load_file(filename);
    mem_dump(0x40, 30);
}
int main(int a1, char* a2[]) {
    test_mem();
    if (a1 > 1)
        test_load(a2[a1 - 1]);
    else {
        printf("Usage: %s FILE\n", a2[0]);
        return 0;
    }
    return 0;
}
byte b_read(Adress a) {
    byte b;
    if (a % 2 == 0)
        b = mem[a] & 0xFF;  //b = (byte)mem[a];
    else {
        word w = mem[a-1];
        b = w >> 8 & 0xFF;
    }
    return b;
}
void b_write(Adress adr, byte b) {
    assert(adr % 2 == 0);
    mem[adr] = b;
}
word w_read(Adress adr) {
    if (adr % 2) {
        printf("Erorr: adress should be even for read word");
        exit(1);
    }
    word w = ((word)mem[adr + 1]) << 8;
    w = w | mem[adr];
    //printf("w = %04x\n", w);
    return w;
}

void w_write(Adress adr, word w) {
    if (adr % 2) {
        printf("Erorr: adress should be even for write word");
        exit(1);
    }
    word w1 = w >> 8;
    byte b1 = ((byte)w);
    mem[adr] = b1;
    byte b2 = ((byte)w1);
    mem[adr + 1] = b2;
}

void load_file() {
    int adr, n;
    while(0 < scanf("%x%x", &adr, &n)) {
        for (int i = 0; i < n; ++i) {
            int _byte;
            scanf("%x", &_byte);
            b_write(adr, _byte);
            ++adr;
        }
    }
}

void mem_dump(Adress start, word n) {
    for (int i = 0; i < n / 2; ++i) {
        printf("%06o : ", start);
        word w = w_read(start);
        printf("%06o\n", w);
        start += 2;
    }
    if (n % 2)
        mem_dump(start, 2);
}
